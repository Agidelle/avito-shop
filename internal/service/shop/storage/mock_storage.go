// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

// Ensure, that IStorageMock does implement IStorage.
// If this is not the case, regenerate this file with moq.
var _ IStorage = &IStorageMock{}

// IStorageMock is a mock implementation of IStorage.
//
//	func TestSomethingThatUsesIStorage(t *testing.T) {
//
//		// make and configure a mocked IStorage
//		mockedIStorage := &IStorageMock{
//			AddNewUserFunc: func(username string, password string) error {
//				panic("mock out the AddNewUser method")
//			},
//			BuyItemFunc: func(name string, item string, amount int) error {
//				panic("mock out the BuyItem method")
//			},
//			CheckAuthFunc: func(username string) (string, error) {
//				panic("mock out the CheckAuth method")
//			},
//			GetInfoFunc: func(ir *InfoResponse, username string) (int, error) {
//				panic("mock out the GetInfo method")
//			},
//			GetInventoryFunc: func(ir *InfoResponse, id int) error {
//				panic("mock out the GetInventory method")
//			},
//			GetReceivedHistoryFunc: func(ir *InfoResponse, id int) error {
//				panic("mock out the GetReceivedHistory method")
//			},
//			GetSendHistoryFunc: func(ir *InfoResponse, id int) error {
//				panic("mock out the GetSendHistory method")
//			},
//			SendCoinsFunc: func(username string, fromUserID int, toUserID int, scr *SendCoinRequest) error {
//				panic("mock out the SendCoins method")
//			},
//		}
//
//		// use mockedIStorage in code that requires IStorage
//		// and then make assertions.
//
//	}
type IStorageMock struct {
	// AddNewUserFunc mocks the AddNewUser method.
	AddNewUserFunc func(username string, password string) error

	// BuyItemFunc mocks the BuyItem method.
	BuyItemFunc func(name string, item string, amount int) error

	// CheckAuthFunc mocks the CheckAuth method.
	CheckAuthFunc func(username string) (string, error)

	// GetInfoFunc mocks the GetInfo method.
	GetInfoFunc func(ir *InfoResponse, username string) (int, error)

	// GetInventoryFunc mocks the GetInventory method.
	GetInventoryFunc func(ir *InfoResponse, id int) error

	// GetReceivedHistoryFunc mocks the GetReceivedHistory method.
	GetReceivedHistoryFunc func(ir *InfoResponse, id int) error

	// GetSendHistoryFunc mocks the GetSendHistory method.
	GetSendHistoryFunc func(ir *InfoResponse, id int) error

	// SendCoinsFunc mocks the SendCoins method.
	SendCoinsFunc func(username string, fromUserID int, toUserID int, scr *SendCoinRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// AddNewUser holds details about calls to the AddNewUser method.
		AddNewUser []struct {
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
		// BuyItem holds details about calls to the BuyItem method.
		BuyItem []struct {
			// Name is the name argument value.
			Name string
			// Item is the item argument value.
			Item string
			// Amount is the amount argument value.
			Amount int
		}
		// CheckAuth holds details about calls to the CheckAuth method.
		CheckAuth []struct {
			// Username is the username argument value.
			Username string
		}
		// GetInfo holds details about calls to the GetInfo method.
		GetInfo []struct {
			// Ir is the ir argument value.
			Ir *InfoResponse
			// Username is the username argument value.
			Username string
		}
		// GetInventory holds details about calls to the GetInventory method.
		GetInventory []struct {
			// Ir is the ir argument value.
			Ir *InfoResponse
			// ID is the id argument value.
			ID int
		}
		// GetReceivedHistory holds details about calls to the GetReceivedHistory method.
		GetReceivedHistory []struct {
			// Ir is the ir argument value.
			Ir *InfoResponse
			// ID is the id argument value.
			ID int
		}
		// GetSendHistory holds details about calls to the GetSendHistory method.
		GetSendHistory []struct {
			// Ir is the ir argument value.
			Ir *InfoResponse
			// ID is the id argument value.
			ID int
		}
		// SendCoins holds details about calls to the SendCoins method.
		SendCoins []struct {
			// Username is the username argument value.
			Username string
			// FromUserID is the fromUserID argument value.
			FromUserID int
			// ToUserID is the toUserID argument value.
			ToUserID int
			// Scr is the scr argument value.
			Scr *SendCoinRequest
		}
	}
	lockAddNewUser         sync.RWMutex
	lockBuyItem            sync.RWMutex
	lockCheckAuth          sync.RWMutex
	lockGetInfo            sync.RWMutex
	lockGetInventory       sync.RWMutex
	lockGetReceivedHistory sync.RWMutex
	lockGetSendHistory     sync.RWMutex
	lockSendCoins          sync.RWMutex
}

// AddNewUser calls AddNewUserFunc.
func (mock *IStorageMock) AddNewUser(username string, password string) error {
	if mock.AddNewUserFunc == nil {
		panic("IStorageMock.AddNewUserFunc: method is nil but IStorage.AddNewUser was just called")
	}
	callInfo := struct {
		Username string
		Password string
	}{
		Username: username,
		Password: password,
	}
	mock.lockAddNewUser.Lock()
	mock.calls.AddNewUser = append(mock.calls.AddNewUser, callInfo)
	mock.lockAddNewUser.Unlock()
	return mock.AddNewUserFunc(username, password)
}

// AddNewUserCalls gets all the calls that were made to AddNewUser.
// Check the length with:
//
//	len(mockedIStorage.AddNewUserCalls())
func (mock *IStorageMock) AddNewUserCalls() []struct {
	Username string
	Password string
} {
	var calls []struct {
		Username string
		Password string
	}
	mock.lockAddNewUser.RLock()
	calls = mock.calls.AddNewUser
	mock.lockAddNewUser.RUnlock()
	return calls
}

// BuyItem calls BuyItemFunc.
func (mock *IStorageMock) BuyItem(name string, item string, amount int) error {
	if mock.BuyItemFunc == nil {
		panic("IStorageMock.BuyItemFunc: method is nil but IStorage.BuyItem was just called")
	}
	callInfo := struct {
		Name   string
		Item   string
		Amount int
	}{
		Name:   name,
		Item:   item,
		Amount: amount,
	}
	mock.lockBuyItem.Lock()
	mock.calls.BuyItem = append(mock.calls.BuyItem, callInfo)
	mock.lockBuyItem.Unlock()
	return mock.BuyItemFunc(name, item, amount)
}

// BuyItemCalls gets all the calls that were made to BuyItem.
// Check the length with:
//
//	len(mockedIStorage.BuyItemCalls())
func (mock *IStorageMock) BuyItemCalls() []struct {
	Name   string
	Item   string
	Amount int
} {
	var calls []struct {
		Name   string
		Item   string
		Amount int
	}
	mock.lockBuyItem.RLock()
	calls = mock.calls.BuyItem
	mock.lockBuyItem.RUnlock()
	return calls
}

// CheckAuth calls CheckAuthFunc.
func (mock *IStorageMock) CheckAuth(username string) (string, error) {
	if mock.CheckAuthFunc == nil {
		panic("IStorageMock.CheckAuthFunc: method is nil but IStorage.CheckAuth was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockCheckAuth.Lock()
	mock.calls.CheckAuth = append(mock.calls.CheckAuth, callInfo)
	mock.lockCheckAuth.Unlock()
	return mock.CheckAuthFunc(username)
}

// CheckAuthCalls gets all the calls that were made to CheckAuth.
// Check the length with:
//
//	len(mockedIStorage.CheckAuthCalls())
func (mock *IStorageMock) CheckAuthCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockCheckAuth.RLock()
	calls = mock.calls.CheckAuth
	mock.lockCheckAuth.RUnlock()
	return calls
}

// GetInfo calls GetInfoFunc.
func (mock *IStorageMock) GetInfo(ir *InfoResponse, username string) (int, error) {
	if mock.GetInfoFunc == nil {
		panic("IStorageMock.GetInfoFunc: method is nil but IStorage.GetInfo was just called")
	}
	callInfo := struct {
		Ir       *InfoResponse
		Username string
	}{
		Ir:       ir,
		Username: username,
	}
	mock.lockGetInfo.Lock()
	mock.calls.GetInfo = append(mock.calls.GetInfo, callInfo)
	mock.lockGetInfo.Unlock()
	return mock.GetInfoFunc(ir, username)
}

// GetInfoCalls gets all the calls that were made to GetInfo.
// Check the length with:
//
//	len(mockedIStorage.GetInfoCalls())
func (mock *IStorageMock) GetInfoCalls() []struct {
	Ir       *InfoResponse
	Username string
} {
	var calls []struct {
		Ir       *InfoResponse
		Username string
	}
	mock.lockGetInfo.RLock()
	calls = mock.calls.GetInfo
	mock.lockGetInfo.RUnlock()
	return calls
}

// GetInventory calls GetInventoryFunc.
func (mock *IStorageMock) GetInventory(ir *InfoResponse, id int) error {
	if mock.GetInventoryFunc == nil {
		panic("IStorageMock.GetInventoryFunc: method is nil but IStorage.GetInventory was just called")
	}
	callInfo := struct {
		Ir *InfoResponse
		ID int
	}{
		Ir: ir,
		ID: id,
	}
	mock.lockGetInventory.Lock()
	mock.calls.GetInventory = append(mock.calls.GetInventory, callInfo)
	mock.lockGetInventory.Unlock()
	return mock.GetInventoryFunc(ir, id)
}

// GetInventoryCalls gets all the calls that were made to GetInventory.
// Check the length with:
//
//	len(mockedIStorage.GetInventoryCalls())
func (mock *IStorageMock) GetInventoryCalls() []struct {
	Ir *InfoResponse
	ID int
} {
	var calls []struct {
		Ir *InfoResponse
		ID int
	}
	mock.lockGetInventory.RLock()
	calls = mock.calls.GetInventory
	mock.lockGetInventory.RUnlock()
	return calls
}

// GetReceivedHistory calls GetReceivedHistoryFunc.
func (mock *IStorageMock) GetReceivedHistory(ir *InfoResponse, id int) error {
	if mock.GetReceivedHistoryFunc == nil {
		panic("IStorageMock.GetReceivedHistoryFunc: method is nil but IStorage.GetReceivedHistory was just called")
	}
	callInfo := struct {
		Ir *InfoResponse
		ID int
	}{
		Ir: ir,
		ID: id,
	}
	mock.lockGetReceivedHistory.Lock()
	mock.calls.GetReceivedHistory = append(mock.calls.GetReceivedHistory, callInfo)
	mock.lockGetReceivedHistory.Unlock()
	return mock.GetReceivedHistoryFunc(ir, id)
}

// GetReceivedHistoryCalls gets all the calls that were made to GetReceivedHistory.
// Check the length with:
//
//	len(mockedIStorage.GetReceivedHistoryCalls())
func (mock *IStorageMock) GetReceivedHistoryCalls() []struct {
	Ir *InfoResponse
	ID int
} {
	var calls []struct {
		Ir *InfoResponse
		ID int
	}
	mock.lockGetReceivedHistory.RLock()
	calls = mock.calls.GetReceivedHistory
	mock.lockGetReceivedHistory.RUnlock()
	return calls
}

// GetSendHistory calls GetSendHistoryFunc.
func (mock *IStorageMock) GetSendHistory(ir *InfoResponse, id int) error {
	if mock.GetSendHistoryFunc == nil {
		panic("IStorageMock.GetSendHistoryFunc: method is nil but IStorage.GetSendHistory was just called")
	}
	callInfo := struct {
		Ir *InfoResponse
		ID int
	}{
		Ir: ir,
		ID: id,
	}
	mock.lockGetSendHistory.Lock()
	mock.calls.GetSendHistory = append(mock.calls.GetSendHistory, callInfo)
	mock.lockGetSendHistory.Unlock()
	return mock.GetSendHistoryFunc(ir, id)
}

// GetSendHistoryCalls gets all the calls that were made to GetSendHistory.
// Check the length with:
//
//	len(mockedIStorage.GetSendHistoryCalls())
func (mock *IStorageMock) GetSendHistoryCalls() []struct {
	Ir *InfoResponse
	ID int
} {
	var calls []struct {
		Ir *InfoResponse
		ID int
	}
	mock.lockGetSendHistory.RLock()
	calls = mock.calls.GetSendHistory
	mock.lockGetSendHistory.RUnlock()
	return calls
}

// SendCoins calls SendCoinsFunc.
func (mock *IStorageMock) SendCoins(username string, fromUserID int, toUserID int, scr *SendCoinRequest) error {
	if mock.SendCoinsFunc == nil {
		panic("IStorageMock.SendCoinsFunc: method is nil but IStorage.SendCoins was just called")
	}
	callInfo := struct {
		Username   string
		FromUserID int
		ToUserID   int
		Scr        *SendCoinRequest
	}{
		Username:   username,
		FromUserID: fromUserID,
		ToUserID:   toUserID,
		Scr:        scr,
	}
	mock.lockSendCoins.Lock()
	mock.calls.SendCoins = append(mock.calls.SendCoins, callInfo)
	mock.lockSendCoins.Unlock()
	return mock.SendCoinsFunc(username, fromUserID, toUserID, scr)
}

// SendCoinsCalls gets all the calls that were made to SendCoins.
// Check the length with:
//
//	len(mockedIStorage.SendCoinsCalls())
func (mock *IStorageMock) SendCoinsCalls() []struct {
	Username   string
	FromUserID int
	ToUserID   int
	Scr        *SendCoinRequest
} {
	var calls []struct {
		Username   string
		FromUserID int
		ToUserID   int
		Scr        *SendCoinRequest
	}
	mock.lockSendCoins.RLock()
	calls = mock.calls.SendCoins
	mock.lockSendCoins.RUnlock()
	return calls
}
