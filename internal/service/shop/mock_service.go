// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package shop

import (
	"avito-shop/internal/service/shop/storage"
	"sync"
)

// Ensure, that IServiceMock does implement IService.
// If this is not the case, regenerate this file with moq.
var _ IService = &IServiceMock{}

// IServiceMock is a mock implementation of IService.
//
//	func TestSomethingThatUsesIService(t *testing.T) {
//
//		// make and configure a mocked IService
//		mockedIService := &IServiceMock{
//			CollectAllInfoFunc: func(username string) (*storage.InfoResponse, error) {
//				panic("mock out the CollectAllInfo method")
//			},
//			PurchaseFunc: func(username string, item string) error {
//				panic("mock out the Purchase method")
//			},
//			SendFunc: func(fromUsername string, scr *storage.SendCoinRequest) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedIService in code that requires IService
//		// and then make assertions.
//
//	}
type IServiceMock struct {
	// CollectAllInfoFunc mocks the CollectAllInfo method.
	CollectAllInfoFunc func(username string) (*storage.InfoResponse, error)

	// PurchaseFunc mocks the Purchase method.
	PurchaseFunc func(username string, item string) error

	// SendFunc mocks the Send method.
	SendFunc func(fromUsername string, scr *storage.SendCoinRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// CollectAllInfo holds details about calls to the CollectAllInfo method.
		CollectAllInfo []struct {
			// Username is the username argument value.
			Username string
		}
		// Purchase holds details about calls to the Purchase method.
		Purchase []struct {
			// Username is the username argument value.
			Username string
			// Item is the item argument value.
			Item string
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// FromUsername is the fromUsername argument value.
			FromUsername string
			// Scr is the scr argument value.
			Scr *storage.SendCoinRequest
		}
	}
	lockCollectAllInfo sync.RWMutex
	lockPurchase       sync.RWMutex
	lockSend           sync.RWMutex
}

// CollectAllInfo calls CollectAllInfoFunc.
func (mock *IServiceMock) CollectAllInfo(username string) (*storage.InfoResponse, error) {
	if mock.CollectAllInfoFunc == nil {
		panic("IServiceMock.CollectAllInfoFunc: method is nil but IService.CollectAllInfo was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockCollectAllInfo.Lock()
	mock.calls.CollectAllInfo = append(mock.calls.CollectAllInfo, callInfo)
	mock.lockCollectAllInfo.Unlock()
	return mock.CollectAllInfoFunc(username)
}

// CollectAllInfoCalls gets all the calls that were made to CollectAllInfo.
// Check the length with:
//
//	len(mockedIService.CollectAllInfoCalls())
func (mock *IServiceMock) CollectAllInfoCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockCollectAllInfo.RLock()
	calls = mock.calls.CollectAllInfo
	mock.lockCollectAllInfo.RUnlock()
	return calls
}

// Purchase calls PurchaseFunc.
func (mock *IServiceMock) Purchase(username string, item string) error {
	if mock.PurchaseFunc == nil {
		panic("IServiceMock.PurchaseFunc: method is nil but IService.Purchase was just called")
	}
	callInfo := struct {
		Username string
		Item     string
	}{
		Username: username,
		Item:     item,
	}
	mock.lockPurchase.Lock()
	mock.calls.Purchase = append(mock.calls.Purchase, callInfo)
	mock.lockPurchase.Unlock()
	return mock.PurchaseFunc(username, item)
}

// PurchaseCalls gets all the calls that were made to Purchase.
// Check the length with:
//
//	len(mockedIService.PurchaseCalls())
func (mock *IServiceMock) PurchaseCalls() []struct {
	Username string
	Item     string
} {
	var calls []struct {
		Username string
		Item     string
	}
	mock.lockPurchase.RLock()
	calls = mock.calls.Purchase
	mock.lockPurchase.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *IServiceMock) Send(fromUsername string, scr *storage.SendCoinRequest) error {
	if mock.SendFunc == nil {
		panic("IServiceMock.SendFunc: method is nil but IService.Send was just called")
	}
	callInfo := struct {
		FromUsername string
		Scr          *storage.SendCoinRequest
	}{
		FromUsername: fromUsername,
		Scr:          scr,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(fromUsername, scr)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedIService.SendCalls())
func (mock *IServiceMock) SendCalls() []struct {
	FromUsername string
	Scr          *storage.SendCoinRequest
} {
	var calls []struct {
		FromUsername string
		Scr          *storage.SendCoinRequest
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
